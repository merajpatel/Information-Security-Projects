package P2P;


/**
* P2P/ClientRequestPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from p2p.idl
* Wednesday, February 10, 2016 6:13:40 PM EST
*/

public abstract class ClientRequestPOA extends org.omg.PortableServer.Servant
 implements P2P.ClientRequestOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("addFile", new java.lang.Integer (0));
    _methods.put ("removeFile", new java.lang.Integer (1));
    _methods.put ("searchFile", new java.lang.Integer (2));
    _methods.put ("viewAllFiles", new java.lang.Integer (3));
    _methods.put ("downloadFile", new java.lang.Integer (4));
    _methods.put ("clearUploads", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // P2P/ClientRequest/addFile
       {
         String fileName = in.read_string ();
         String ip = in.read_string ();
         String port = in.read_string ();
         String $result = null;
         $result = this.addFile (fileName, ip, port);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // P2P/ClientRequest/removeFile
       {
         String fileName = in.read_string ();
         String ip = in.read_string ();
         String port = in.read_string ();
         String $result = null;
         $result = this.removeFile (fileName, ip, port);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 2:  // P2P/ClientRequest/searchFile
       {
         String fileName = in.read_string ();
         String $result = null;
         $result = this.searchFile (fileName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // P2P/ClientRequest/viewAllFiles
       {
         String $result = null;
         $result = this.viewAllFiles ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // P2P/ClientRequest/downloadFile
       {
         String fileName = in.read_string ();
         String $result = null;
         $result = this.downloadFile (fileName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 5:  // P2P/ClientRequest/clearUploads
       {
         String ip = in.read_string ();
         String port = in.read_string ();
         String $result = null;
         $result = this.clearUploads (ip, port);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:P2P/ClientRequest:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ClientRequest _this() 
  {
    return ClientRequestHelper.narrow(
    super._this_object());
  }

  public ClientRequest _this(org.omg.CORBA.ORB orb) 
  {
    return ClientRequestHelper.narrow(
    super._this_object(orb));
  }


} // class ClientRequestPOA
